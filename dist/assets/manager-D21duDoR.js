const e={allEvents:[],gameEvents:[],timelineEvents:[],nextCard:null,score:0,correctAnswers:0,wrongAnswers:0,streak:0,isGameOver:!1},g="triviaGameState",G=v=>{e.allEvents=v;let m=()=>{};const c=()=>m(e),f=()=>{const s=new Map;e.allEvents.forEach(n=>{s.has(n.year)||s.set(n.year,[]),s.get(n.year).push(n)});const a=Array.from(s.keys()).sort(()=>.5-Math.random()).slice(0,11);e.gameEvents=a.map(n=>{const o=s.get(n);return o[Math.floor(Math.random()*o.length)]})},u=()=>{f(),Object.assign(e,{timelineEvents:[],nextCard:null,score:0,correctAnswers:0,wrongAnswers:0,streak:0,isGameOver:!1});const s=Math.floor(Math.random()*e.gameEvents.length),t=e.gameEvents.splice(s,1)[0];e.timelineEvents.push({...t,isResolved:!0,isCorrect:!0,isAnchor:!0,isExpanded:!1}),e.nextCard=e.gameEvents[0],l(),c()},w=(s,t)=>{const r=e.nextCard;if(r.id!==s)return;const a=[...e.timelineEvents].sort((i,A)=>i.year-A.year),n=a[t-1],o=a[t],C=n?n.year:-1/0,h=o?o.year:1/0,d=r.year>C&&r.year<h;if(d){e.streak++;const i=1+e.streak;e.score+=i,e.correctAnswers++}else e.streak=0,e.wrongAnswers++;e.timelineEvents.push({...r,isResolved:!0,isCorrect:d,isExpanded:!1});const E=e.gameEvents.findIndex(i=>i.id===s);E+1>=e.gameEvents.length?(e.isGameOver=!0,e.nextCard=null,l()):(e.nextCard=e.gameEvents[E+1],x()),c()},p=s=>{const t=e.timelineEvents.find(r=>r.id===s);t&&(t.isExpanded=!t.isExpanded,c())},x=()=>{const s={gameEvents:e.gameEvents,timelineEvents:e.timelineEvents,score:e.score,correctAnswers:e.correctAnswers,wrongAnswers:e.wrongAnswers,streak:e.streak};localStorage.setItem(g,JSON.stringify(s))},l=()=>{localStorage.removeItem(g)};return{startGame:u,confirmPlacement:w,resumeGame:s=>{const t=s.timelineEvents.map(n=>({...n,isExpanded:n.isExpanded||!1}));Object.assign(e,{gameEvents:s.gameEvents,timelineEvents:t,score:s.score,correctAnswers:s.correctAnswers,wrongAnswers:s.wrongAnswers,streak:s.streak||0,isGameOver:!1});const r=new Set(e.timelineEvents.map(n=>n.id)),a=e.gameEvents.find(n=>!r.has(n.id));a?e.nextCard=a:(e.isGameOver=!0,e.nextCard=null),c()},clearGameState:l,toggleCardExpansion:p,set onStateChange(s){m=s},get state(){return e}}};export{G as createGameManager};
